@page "/times/local/add/validated"
@using BlazorTimes.Client.Helpers
@inject NavigationManager navigationManager
@inject IJSRuntime js

<h3>Add Time Validated</h3>
@if (InvalidEntry)
{
    <h4>Invalid - Correct errors and try again!!</h4>
}
@if (Time == null)
{
    <h4>No Time!</h4>
}
else
{
    <EditForm Model=@Time
              OnValidSubmit="ValidSubmit" OnInvalidSubmit="InvalidSubmit">

        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label>Name:</label>
            <InputText @bind-Value="Time.Name" placeholder="Enter name!" />
            <ValidationMessage For="() => Time.Name" />
        </div>
        <div class="form-group">
            <label>Date:</label>
            <InputDate @bind-Value="Time.Date" ParsingErrorMessage="Must be a Date!" AdditionalAttributes="DateAttributes" />
        </div>
        <div class="form-group">
            <label>Time:</label>
            <InputTime @bind-Value="Time.Time" ParsingErrorMessage="Must be a Time!"  />
        </div>
        <button type="submit">Save</button>
    </EditForm>
    <button @onclick="Cancel">Cancel</button>
}
@code {
    public RunTime Time { get; set; } = new RunTime();
    public bool InvalidEntry { get; set; } = false;
    public Dictionary<string, object> DateAttributes { get; set; } =
        new Dictionary<string, object> { ["type"] = "date" };
    [Parameter]
    public int Id { get; set; }
    public RunTime[] Times { get; set; }

    public async Task ValidSubmit()
    {
        var temp = await DataStoreArray<RunTime>.RetrieveItemArrayAsync(js, nameof(RunTime));
        var times = temp == null ? new List<RunTime>() : temp.ToList();
        int max = times.Count== 0 ? 0 : times.Max(x => x.Id);
        Time.Id = max + 1;
        times.Add(Time);
        await DataStoreArray<RunTime>.StoreItemArrayAsync(js, nameof(RunTime), times.ToArray<RunTime>());
        navigationManager.NavigateTo("/times/local/display");
    }
    public void InvalidSubmit()
    {
        InvalidEntry = true;
    }
    public void Cancel()
    {
        navigationManager.NavigateTo("/times/local/display");
    }
}

